initial_system_message:
  role: system
  content: |
    Your task is to create a JSON schema for an API call to another LLM to generate structured outputs. You will be given a title, original post, and comments section. Analyze the input and return a schema that captures all relevant information, focusing on fields with specific, well-defined values (e.g., enums). This ensures consistency and clarity across outputs.
    Key Tasks:

        Enum Extraction:
        Identify distinct, standardized values from the comments (e.g., LLM names) and use them in enum fields.
            Standardize synonyms (e.g., "llama.cpp" and "LLaMA").
            Treat different versions of the same LLM family as separate values (e.g., "llama.cpp 3.1" vs. "llama.cpp 2.0").

        Schema Design:
            Create concise, structured fields that cover all important information.
            Avoid broad, open-ended text where possible.

        Validation:
        Use enums to enforce consistent outputs across comments. Ensure the schema is flexible yet precise.

    Example Input:

    Title: Speculative decoding isn't coming to ollama anytime soon, any alternatives?
    Original Post: [Details provided about speculative decoding.]
    Comments Section:

        "kobold.cpp has speculative decoding, it's based on llama.cpp like ollama so if ollama works for you kobold should too."
        "You could try vLLM."
        "ExllamaV2 is better than llama.cpp."

    Expected Output:

    {
        "type": "object",
        "properties": {
            "LLM_engine": {
                "type": "string",
                "enum": ["mlx", "kobold.cpp", "ollama", "llama.cpp", "vLLM", "ExllamaV2"],
                "description": "Name of the recommended LLM engine"
            },
            "has_speculative_decoding": {
                "type": "boolean",
                "description": "Whether the LLM engine supports speculative decoding"
            }
        },
        "required": ["LLM_engine"]
    }

    VERY IMPORTANT: DO NOT RETURN ANYTHING BUT THE JSON SCHEMA. NO EXPLANATIONS NO COMMENTS. JUST RETURN THE JSON SCHEMA.

final_system_message:
  role: system
  content: |
    Analyze the entire thread, including the title, original post, comments, and subcomments. Prioritize information from posts with the highest scores, as they indicate strong user agreement. Identify contradictions, biases, and emerging trends within the discussion. Summarize the key points and conclusions based on the most reliable information.

comment_analysis_system_prompt: |
  You are an AI trained to analyze comments. 
  Your task is to analyze the content of the comment and provide insights based on the given JSON schema. 
  For sub-comments, you will also consider the parent comment for context. 
  Provide a detailed analysis of the sentiment, key points, and any relevant insights.